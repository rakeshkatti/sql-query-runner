export interface Dataset {
    name: string
    description: string
    columns: string[]
    data: any[]
    sampleQueries: string[]
}

export const datasets: Dataset[] = [
    {
        name: 'Employees',
        description: 'Employee information and organizational structure',
        columns: [
            'employee_id',
            'last_name',
            'first_name',
            'title',
            'title_of_courtesy',
            'birth_date',
            'hire_date',
            'address',
            'city',
            'region',
            'postal_code',
            'country',
            'home_phone',
            'extension',
            'reports_to',
        ],
        data: Array.from({ length: 150 }, (_, i) => ({
            employee_id: i + 1,
            last_name: [
                'Fuller',
                'Davolio',
                'Leverling',
                'Peacock',
                'Buchanan',
                'Suyama',
                'King',
                'Callahan',
                'Dodsworth',
                'Smith',
                'Johnson',
                'Williams',
                'Brown',
                'Jones',
                'Garcia',
            ][i % 15],
            first_name: [
                'Nancy',
                'Andrew',
                'Janet',
                'Margaret',
                'Steven',
                'Michael',
                'Robert',
                'Laura',
                'Anne',
                'John',
                'Sarah',
                'David',
                'Jennifer',
                'Lisa',
                'Mark',
            ][i % 15],
            title: [
                'Sales Representative',
                'Vice President Sales',
                'Sales Manager',
                'Inside Sales Coordinator',
                'Sales Representative',
            ][i % 5],
            title_of_courtesy: ['Ms.', 'Dr.', 'Mrs.', 'Mr.'][i % 4],
            birth_date: new Date(1960 + (i % 20), i % 12, (i % 28) + 1)
                .toISOString()
                .split('T')[0],
            hire_date: new Date(1992 + (i % 10), i % 12, (i % 28) + 1)
                .toISOString()
                .split('T')[0],
            address: `${100 + i} Main St`,
            city: ['Seattle', 'Tacoma', 'Kirkland', 'Redmond', 'London', 'NYC'][
                i % 6
            ],
            region: ['WA', 'WA', 'WA', 'WA', null, 'NY'][i % 6],
            postal_code: `${98000 + (i % 199)}`,
            country: ['USA', 'USA', 'USA', 'USA', 'UK', 'USA'][i % 6],
            home_phone: `(${200 + (i % 799)}) 555-${1000 + (i % 8999)}`,
            extension: `${100 + (i % 899)}`,
            reports_to: i > 5 ? Math.floor(Math.random() * 5) + 1 : null,
        })),
        sampleQueries: [
            'SELECT * FROM employees WHERE title = "Sales Representative"',
            'SELECT city, COUNT(*) as employee_count FROM employees GROUP BY city ORDER BY employee_count DESC',
            'SELECT first_name, last_name, title FROM employees WHERE reports_to IS NOT NULL',
            'SELECT * FROM employees WHERE hire_date >= "2000-01-01"',
            'SELECT title, AVG(YEAR(CURDATE()) - YEAR(birth_date)) as avg_age FROM employees GROUP BY title',
            'SELECT * FROM employees WHERE country = "USA" AND region = "WA"',
            'SELECT first_name, last_name, YEAR(hire_date) as hire_year FROM employees ORDER BY hire_date',
            'CREATE TABLE employee_backup AS SELECT * FROM employees WHERE hire_date < "1995-01-01"',
            'UPDATE employees SET region = "WA" WHERE city IN ("Seattle", "Tacoma", "Kirkland", "Redmond")',
            'DELETE FROM employees WHERE reports_to IS NULL AND employee_id > 10',
        ],
    },
    {
        name: 'Customers',
        description: 'Customer contact information and company details',
        columns: [
            'customer_id',
            'company_name',
            'contact_name',
            'contact_title',
            'address',
            'city',
            'region',
            'postal_code',
            'country',
            'phone',
            'fax',
        ],
        data: Array.from({ length: 500 }, (_, i) => ({
            customer_id: `${String.fromCharCode(65 + (i % 26))}${String.fromCharCode(65 + ((i + 1) % 26))}${String.fromCharCode(65 + ((i + 2) % 26))}${String.fromCharCode(65 + ((i + 3) % 26))}${String.fromCharCode(65 + ((i + 4) % 26))}`,
            company_name: `${['Alfreds', 'Antonio', 'Around', 'Berglunds', 'Blauer', 'Comércio', 'Consolidated', 'Eastern', 'Familia', 'Gourmet', 'Great', 'Hungry', 'Island', 'La'][i % 14]} ${['Futterkiste', 'Moreno', 'Horn', 'Shipping', 'See', 'Mineiro', 'Holdings', 'Connection', 'Arquibaldo', 'Lanchonetes', 'Lakes', 'Coyote', 'Trading', 'maison'][i % 14]}`,
            contact_name: `${['Maria', 'Ana', 'Antonio', 'Thomas', 'Christina', 'Hanna', 'Frédérique', 'Martín', 'Laurence', 'Elizabeth'][i % 10]} ${['Anders', 'Trujillo', 'Moreno', 'Hardy', 'Berglund', 'Moos', 'Citeaux', 'Sommer', 'Lebihan', 'Lincoln'][i % 10]}`,
            contact_title: [
                'Owner',
                'Marketing Manager',
                'Sales Representative',
                'Accounting Manager',
                'Sales Manager',
            ][i % 5],
            address: `${100 + i} ${['Main', 'Oak', 'Pine', 'Elm', 'Maple'][i % 5]} St`,
            city: [
                'Berlin',
                'México D.F.',
                'Bern',
                'London',
                'Luleå',
                'Marseille',
                'Sao Paulo',
                'Münster',
                'Paris',
                'Tsawassen',
            ][i % 10],
            region: i % 3 === 0 ? ['BC', 'WA', 'SP'][i % 3] : null,
            postal_code: `${10000 + (i % 89999)}`,
            country: [
                'Germany',
                'Mexico',
                'Switzerland',
                'UK',
                'Sweden',
                'France',
                'Brazil',
                'Germany',
                'France',
                'Canada',
            ][i % 10],
            phone: `+${i % 999}-${1000 + (i % 8999)}`,
            fax:
                Math.random() > 0.5 ? `+${i % 999}-${1000 + (i % 8999)}` : null,
        })),
        sampleQueries: [
            'SELECT * FROM customers WHERE country = "Germany"',
            'SELECT country, COUNT(*) as customer_count FROM customers GROUP BY country ORDER BY customer_count DESC',
            'SELECT company_name, contact_name FROM customers WHERE contact_title = "Owner"',
            'SELECT * FROM customers WHERE city LIKE "%London%"',
            'SELECT DISTINCT country FROM customers ORDER BY country',
            'SELECT * FROM customers WHERE fax IS NOT NULL',
            'SELECT city, COUNT(*) as count FROM customers WHERE country = "USA" GROUP BY city',
            'CREATE TABLE vip_customers AS SELECT * FROM customers WHERE customer_id LIKE "A%"',
            'UPDATE customers SET region = "Unknown" WHERE region IS NULL',
            'DELETE FROM customers WHERE phone IS NULL',
        ],
    },
    {
        name: 'Products',
        description: 'Product catalog with pricing and inventory information',
        columns: [
            'product_id',
            'product_name',
            'supplier_id',
            'category_id',
            'quantity_per_unit',
            'unit_price',
            'units_in_stock',
            'units_on_order',
            'reorder_level',
            'discontinued',
        ],
        data: Array.from({ length: 200 }, (_, i) => ({
            product_id: i + 1,
            product_name: `${['Chai', 'Chang', 'Aniseed', "Chef Anton's", "Grandma's", "Uncle Bob's", 'Northwoods', 'Mishi', 'Ikura', 'Queso'][i % 10]} ${['Syrup', 'Seasoning', 'Sauce', 'Spread', 'Beans', 'Dried Pears', 'Kranberry', 'Kobe Niku', 'Cabrales', 'Manchego'][i % 10]}`,
            supplier_id: (i % 29) + 1,
            category_id: (i % 8) + 1,
            quantity_per_unit: [
                '10 boxes x 20 bags',
                '24 - 12 oz bottles',
                '12 - 550 ml bottles',
                '48 - 6 oz jars',
                '36 boxes',
                '12 - 8 oz jars',
            ][i % 6],
            unit_price: parseFloat((10 + (i % 190)).toFixed(2)),
            units_in_stock: Math.floor(Math.random() * 120),
            units_on_order: Math.floor(Math.random() * 40),
            reorder_level: 10 + (i % 15),
            discontinued: Math.random() > 0.9 ? 1 : 0,
        })),
        sampleQueries: [
            'SELECT * FROM products WHERE unit_price > 50 ORDER BY unit_price DESC',
            'SELECT category_id, AVG(unit_price) as avg_price FROM products GROUP BY category_id',
            'SELECT * FROM products WHERE units_in_stock < reorder_level',
            'SELECT product_name, unit_price * units_in_stock as inventory_value FROM products ORDER BY inventory_value DESC',
            'SELECT * FROM products WHERE discontinued = 0 AND units_in_stock > 0',
            'SELECT supplier_id, COUNT(*) as product_count FROM products GROUP BY supplier_id ORDER BY product_count DESC',
            'SELECT * FROM products WHERE product_name LIKE "%Chai%"',
            'CREATE TABLE expensive_products AS SELECT * FROM products WHERE unit_price > 100',
            'UPDATE products SET reorder_level = 15 WHERE category_id = 1',
            'DELETE FROM products WHERE discontinued = 1 AND units_in_stock = 0',
        ],
    },
    {
        name: 'Orders',
        description: 'Customer orders with shipping and delivery information',
        columns: [
            'order_id',
            'customer_id',
            'employee_id',
            'order_date',
            'required_date',
            'shipped_date',
            'ship_via',
            'freight',
            'ship_name',
            'ship_address',
            'ship_city',
            'ship_region',
            'ship_postal_code',
            'ship_country',
        ],
        data: Array.from({ length: 2000 }, (_, i) => ({
            order_id: 10248 + i,
            customer_id: `${String.fromCharCode(65 + (i % 26))}${String.fromCharCode(65 + ((i + 1) % 26))}${String.fromCharCode(65 + ((i + 2) % 26))}${String.fromCharCode(65 + ((i + 3) % 26))}${String.fromCharCode(65 + ((i + 4) % 26))}`,
            employee_id: (i % 9) + 1,
            order_date: new Date(1996 + (i % 3), i % 12, (i % 28) + 1)
                .toISOString()
                .split('T')[0],
            required_date: new Date(1996 + (i % 3), (i + 1) % 12, (i % 28) + 1)
                .toISOString()
                .split('T')[0],
            shipped_date:
                Math.random() > 0.1
                    ? new Date(1996 + (i % 3), i % 12, ((i + 2) % 28) + 1)
                          .toISOString()
                          .split('T')[0]
                    : null,
            ship_via: (i % 3) + 1,
            freight: parseFloat((Math.random() * 500 + 1).toFixed(2)),
            ship_name: `${['Vins et alcools', 'Toms', 'Hanari', 'Victuailles', 'Suprêmes'][i % 5]} ${['Chevalier', 'Spezialitäten', 'Carnes', 'en stock', 'délices'][i % 5]}`,
            ship_address: `${100 + i} Ship St`,
            ship_city: [
                'Reims',
                'Münster',
                'Rio de Janeiro',
                'Lyon',
                'Charleroi',
            ][i % 5],
            ship_region: i % 4 === 0 ? ['RJ', 'WA', 'SP'][i % 3] : null,
            ship_postal_code: `${10000 + (i % 89999)}`,
            ship_country: ['France', 'Germany', 'Brazil', 'France', 'Belgium'][
                i % 5
            ],
        })),
        sampleQueries: [
            'SELECT * FROM orders WHERE order_date >= "1997-01-01" ORDER BY order_date DESC',
            'SELECT ship_country, COUNT(*) as order_count FROM orders GROUP BY ship_country ORDER BY order_count DESC',
            'SELECT * FROM orders WHERE shipped_date IS NULL',
            'SELECT employee_id, COUNT(*) as orders_handled FROM orders GROUP BY employee_id ORDER BY orders_handled DESC',
            'SELECT AVG(freight) as avg_freight FROM orders WHERE ship_country = "France"',
            'SELECT * FROM orders WHERE freight > 100 ORDER BY freight DESC',
            'SELECT YEAR(order_date) as year, COUNT(*) as orders FROM orders GROUP BY YEAR(order_date)',
            'CREATE TABLE pending_orders AS SELECT * FROM orders WHERE shipped_date IS NULL',
            'UPDATE orders SET ship_region = "Unknown" WHERE ship_region IS NULL',
            'DELETE FROM orders WHERE order_date < "1996-01-01"',
        ],
    },
    {
        name: 'Order Details',
        description:
            'Detailed line items for each order with pricing and quantities',
        columns: [
            'order_id',
            'product_id',
            'unit_price',
            'quantity',
            'discount',
        ],
        data: Array.from({ length: 5000 }, (_, i) => ({
            order_id: 10248 + Math.floor(i / 2.5),
            product_id: (i % 77) + 1,
            unit_price: parseFloat((10 + (i % 190)).toFixed(2)),
            quantity: Math.floor(Math.random() * 50) + 1,
            discount: [0, 0.05, 0.1, 0.15, 0.2, 0.25][
                Math.floor(Math.random() * 6)
            ],
        })),
        sampleQueries: [
            'SELECT * FROM order_details WHERE discount > 0 ORDER BY discount DESC',
            'SELECT product_id, SUM(quantity) as total_sold FROM order_details GROUP BY product_id ORDER BY total_sold DESC',
            'SELECT order_id, SUM(unit_price * quantity * (1 - discount)) as order_total FROM order_details GROUP BY order_id ORDER BY order_total DESC',
            'SELECT * FROM order_details WHERE quantity > 30',
            'SELECT AVG(discount) as avg_discount FROM order_details WHERE discount > 0',
            'SELECT product_id, AVG(unit_price) as avg_price FROM order_details GROUP BY product_id',
            'SELECT COUNT(*) as line_items FROM order_details',
            'CREATE TABLE high_value_items AS SELECT * FROM order_details WHERE unit_price * quantity > 1000',
            'UPDATE order_details SET discount = 0.1 WHERE quantity > 40',
            'DELETE FROM order_details WHERE discount > 0.2 AND quantity < 5',
        ],
    },
    {
        name: 'Categories',
        description: 'Product categories and their descriptions',
        columns: ['category_id', 'category_name', 'description'],
        data: [
            {
                category_id: 1,
                category_name: 'Beverages',
                description: 'Soft drinks, coffees, teas, beers, and ales',
            },
            {
                category_id: 2,
                category_name: 'Condiments',
                description:
                    'Sweet and savory sauces, relishes, spreads, and seasonings',
            },
            {
                category_id: 3,
                category_name: 'Dairy Products',
                description: 'Cheeses',
            },
            {
                category_id: 4,
                category_name: 'Grains/Cereals',
                description: 'Breads, crackers, pasta, and cereal',
            },
            {
                category_id: 5,
                category_name: 'Meat/Poultry',
                description: 'Prepared meats',
            },
            {
                category_id: 6,
                category_name: 'Produce',
                description: 'Dried fruit and bean curd',
            },
            {
                category_id: 7,
                category_name: 'Seafood',
                description: 'Seaweed and fish',
            },
            {
                category_id: 8,
                category_name: 'Confections',
                description: 'Desserts, candies, and sweet breads',
            },
        ],
        sampleQueries: [
            'SELECT * FROM categories ORDER BY category_name',
            'SELECT category_name, LENGTH(description) as desc_length FROM categories ORDER BY desc_length DESC',
            'SELECT * FROM categories WHERE description LIKE "%sweet%"',
            'SELECT COUNT(*) as total_categories FROM categories',
            'SELECT category_name FROM categories WHERE category_id IN (1, 3, 5)',
            'CREATE TABLE food_categories AS SELECT * FROM categories WHERE category_id != 1',
            'UPDATE categories SET description = CONCAT(description, " - Premium quality") WHERE category_id = 1',
            'DELETE FROM categories WHERE category_id > 8',
        ],
    },
    {
        name: 'Suppliers',
        description: 'Supplier contact information and company details',
        columns: [
            'supplier_id',
            'company_name',
            'contact_name',
            'contact_title',
            'address',
            'city',
            'region',
            'postal_code',
            'country',
            'phone',
            'fax',
        ],
        data: Array.from({ length: 30 }, (_, i) => ({
            supplier_id: i + 1,
            company_name: `${['Exotic', 'New Orleans', "Grandma Kelly's", 'Tokyo', 'Cooperativa', "Mayumi's", 'Pavlova', 'Specialty', 'PB Knäckebröd', 'Refrescos'][i % 10]} ${['Liquids', 'Cajun Delights', 'Homestead', 'Traders', 'de Quesos', 'Inc.', 'Ltd.', 'Biscuits', 'AB', 'Americanas'][i % 10]}`,
            contact_name: `${['Charlotte', 'Shelley', 'Regina', 'Yoshi', 'Antonio', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Carlos'][i % 10]} ${['Cooper', 'Burke', 'Murphy', 'Tannamuri', 'del Valle', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Diaz'][i % 10]}`,
            contact_title: [
                'Purchasing Manager',
                'Order Administrator',
                'Sales Representative',
                'Marketing Manager',
            ][i % 4],
            address: `${100 + i} ${['Export', 'Garden', 'Industrial', 'Business', 'Trade'][i % 5]} St`,
            city: [
                'London',
                'New Orleans',
                'Ann Arbor',
                'Tokyo',
                'Oviedo',
                'Osaka',
                'Melbourne',
                'Bend',
                'Göteborg',
                'São Paulo',
            ][i % 10],
            region:
                i % 3 === 0
                    ? [
                          'LA',
                          'MI',
                          null,
                          'Asturias',
                          null,
                          'Victoria',
                          'OR',
                          null,
                          'SP',
                      ][i % 9]
                    : null,
            postal_code: `${10000 + (i % 89999)}`,
            country: [
                'UK',
                'USA',
                'USA',
                'Japan',
                'Spain',
                'Japan',
                'Australia',
                'USA',
                'Sweden',
                'Brazil',
            ][i % 10],
            phone: `+${i % 999}-${1000 + (i % 8999)}`,
            fax:
                Math.random() > 0.3 ? `+${i % 999}-${1000 + (i % 8999)}` : null,
        })),
        sampleQueries: [
            'SELECT * FROM suppliers WHERE country = "USA"',
            'SELECT country, COUNT(*) as supplier_count FROM suppliers GROUP BY country ORDER BY supplier_count DESC',
            'SELECT company_name, contact_name FROM suppliers WHERE contact_title = "Purchasing Manager"',
            'SELECT * FROM suppliers WHERE fax IS NOT NULL',
            'SELECT DISTINCT country FROM suppliers ORDER BY country',
            'SELECT * FROM suppliers WHERE city LIKE "%New%"',
            'CREATE TABLE international_suppliers AS SELECT * FROM suppliers WHERE country != "USA"',
            'UPDATE suppliers SET region = "Unknown" WHERE region IS NULL',
            'DELETE FROM suppliers WHERE phone IS NULL',
        ],
    },
]

export const getDatasetByName = (name: string): Dataset | undefined => {
    return datasets.find(dataset => dataset.name === name)
}

export const getAllDatasetNames = (): string[] => {
    return datasets.map(dataset => dataset.name)
}
